import os.path as osp;
import os;

# import custom settings & custom variables
Import('*');

# list of Boost libs used by test library
utest_boost_lib = ['unit_test_framework'];

# skip init stage
if build_kind == "init" :
	boost_require(utest_boost_lib);
	Return();

exe_name = "bs_tests";
test_units = files(["."], excludes=["test_pymod.cpp"]).sources;

# setup default build environment
tests_env = custom_env.Clone();

# link with libraries
tests_env.AppendUnique(LIBS = ['blue_sky'] + boost_get_libnames(utest_boost_lib));

# build
bs_tests = tests_env.Program(
	target = osp.join(tar_exe_dir, exe_name), source = test_units
);

# library for testing Python module
tests_env['SHLIBPREFIX'] = '';
test_pymod = tests_env.SharedLibrary(
	target = osp.join(tar_exe_dir, 'test_pymod'),
	source = 'test_pymod.cpp'
);

# run test cases
tests_env["EXE_DIR"] = Dir(tar_exe_dir);
run_tests = tests_env.Command(
	target = "bs_tests.log",
	source = osp.join(tar_exe_dir, exe_name),
	action = [
		"-LD_LIBRARY_PATH=$EXE_DIR $EXE_DIR/" + exe_name + " 1>$EXE_DIR/bs_tests.log 2>&1",
		"cat $EXE_DIR/bs_tests.log",
	]
);
Depends(run_tests, bs_tests);
AlwaysBuild(run_tests);

Alias('bs_tests', bs_tests);
Alias('test_pymod', test_pymod);
Alias('run_tests', run_tests);
Alias('tests', [bs_tests, test_pymod, run_tests]);
Export('bs_tests');

