/// @file
/// @author uentity
/// @date 12.01.2016
/// @brief 
/// @copyright
/// This Source Code Form is subject to the terms of the Mozilla Public License,
/// v. 2.0. If a copy of the MPL was not distributed with this file,
/// You can obtain one at https://mozilla.org/MPL/2.0/

#pragma once

#include "setup_common_api.h"
#include "type_info.h"
#include "fwd.h"
#include "detail/typestring.h"
#include <boost/preprocessor/if.hpp>
#include <boost/preprocessor/tuple/enum.hpp>
#ifndef BS_DEFAULT_SERIAL_DISABLED
#include <cereal/types/polymorphic.hpp>
#endif

#include <string>

namespace blue_sky {
	
struct BS_API plugin_descriptor {
	const std::string name;
	const std::string version;
	const std::string description;
	std::string py_namespace;
	// per-plugin globals that holds polymorphic types serialization maps
	void *const serial_input_bindings;
	void *const serial_output_bindings;
	void *const serial_polycasters;

	// nil plugin constructor
	plugin_descriptor();

	// ctor for searching in containers
	template< typename T >
	plugin_descriptor(T&& name_)
		: name(std::forward< T >(name_)),
		serial_input_bindings(nullptr), serial_output_bindings(nullptr), serial_polycasters(nullptr),
		tag_(nil_type_info())
	{}

	// standard ctor for using in plugins
	plugin_descriptor(
		const BS_TYPE_INFO& plugin_tag, const char* name, const char* version,
		const char* description = "", const char* py_namespace = "",
		void* serial_input_bindings = nullptr, void* serial_output_bindings = nullptr,
		void* serial_polycasters = nullptr
	);

	// obtain nil plugin descriptor
	static const plugin_descriptor& nil();
	// test if this is a nil plugin
	bool is_nil() const;

	// comparision operators
	bool operator <(const plugin_descriptor&) const;
	bool operator ==(const plugin_descriptor&) const;
	bool operator !=(const plugin_descriptor& lhs) const {
		return !(*this == lhs);
	}

private:
	BS_TYPE_INFO tag_;
};

struct BS_API plugin_initializer {
	plugin_descriptor const* pd; //!< Pointer to descriptor of plugin being loaded
};

}	// end of blue_sky namespace

/*!
	\brief Plugin descriptor macro.
	This macro should appear only once in all your plugin project, somewhere in main.cpp.
	Never put it into header file!
	Plugin descriptor generated by this macro is searched during plugin loading. If isn't found,
	your library won't be recognized as BlueSky plugin, so don't forget to declare it.
	BLUE_SKY_PLUGIN_DESCRIPTOR_EXT allows you to set Python namespace (scope) name for all classes
	exported to Python.

    Limitations: type name should not contain fancy chars and have size <= 64 (see detail/typestring.h
    for explanation how to increase it).

  \param tag = tag for class
	\param name = plugin's unique name
	\param version = plugin's version
	\param description = description of the plugin
	\param py_namespace = plugin's namespace in Python
	\param no_serial = {0, 1}, set to 1 to disable serialization support for this plugin
*/
#define BS_PLUGIN_DESCRIPTOR_EXT(name, version, description, py_namespace, no_serial)               \
namespace {                                                                                         \
template <typename T> struct bs_this_plugin_tag {};                                                 \
}                                                                                                   \
BS_C_API_PLUGIN const blue_sky::plugin_descriptor* bs_get_plugin_descriptor() {                     \
    static ::blue_sky::plugin_descriptor plugin_info_(                                              \
        BS_GET_TI(bs_this_plugin_tag<typestring_is(name)>),                                         \
        name, version, description, py_namespace,                                                   \
        BOOST_PP_TUPLE_ENUM(BOOST_PP_IF(no_serial, (), (                                            \
            (void*)&cereal::detail::StaticObject<cereal::detail::InputBindingMap>::getInstance(),   \
            (void*)&cereal::detail::StaticObject<cereal::detail::OutputBindingMap>::getInstance(),  \
            (void*)&cereal::detail::StaticObject<cereal::detail::PolymorphicCasters>::getInstance() \
        )))                                                                                         \
    );                                                                                              \
    return &plugin_info_;                                                                           \
}

#ifdef BS_DEFAULT_SERIAL_DISABLED
#define BS_PLUGIN_DESCRIPTOR(name, version, description) \
BS_PLUGIN_DESCRIPTOR_EXT(name, version, description, name, 1)
#else
#define BS_PLUGIN_DESCRIPTOR(name, version, description) \
BS_PLUGIN_DESCRIPTOR_EXT(name, version, description, name, 0)
#endif

//! type of get plugin descrptor pointer function
typedef blue_sky::plugin_descriptor* (*BS_GET_PLUGIN_DESCRIPTOR)();

/*!
\brief Plugin register function.
*/
#define BS_REGISTER_PLUGIN \
BS_C_API_PLUGIN bool bs_register_plugin(const blue_sky::plugin_initializer& bs_init)
//!	type of plugin register function
typedef bool (*bs_register_plugin_fn)(const blue_sky::plugin_initializer&);

